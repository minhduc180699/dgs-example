
type Query {
    getPosts(titleFilter: String): [Post]
    getPost(id: ID): Post

    getCommentByPostId(postId: String!): [Comment]

    getUsers(filter: String): [User]
    getUser(id: ID): User

}

type Mutation {
    createPost(inputPost: InputPost): Post
    createPosts(inputPosts: [InputPost]): [Post]
    updatePost(inputPost: ModifiedPost): Post
    deletePost(id: ID): String
    deleteAll: Int
    createComment(inputComment: InputComment): Comment

    createUser(inputUser: InputUser): Response
    createUsers(inputUsers: [InputUser]): [Response]
    updateUser(inputUser: InputModifiedUser): Response
    deleteUser(id: ID): Response
    addFriend(input: InputAddFriend): Response
}

type Post {
    id: ID!
    bannerUri: String!
    title: String
    description: String
    publishedDate: String
    comments: [Comment]
}
type Comment {
    id: ID
    postId: ID
    content: String
    publishedDate: String
}
input InputComment {
    id: ID
    postId: ID!
    content: String! @NotBlank
    publishedDate: String! @NotBlank
}
input InputPost {
    bannerUri: String! @NotBlank
    title: String @NotBlank
    description: String @NotBlank @Size (max: 5000, min: 10)
    publishedDate: String @NotBlank
}
input ModifiedPost {
    id: ID!
    bannerUri: String!
    title: String
    description: String
    publishedDate: String
}
type Response {
    id: ID!,
    message: String
}